version: '3.8'
services:
  # MongoDB for workflow storage (optional)
  mongodb:
    image: mongo:7.0
    container_name: autotasker_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: autotasker
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - autotasker_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/autotasker --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # n8n Workflow Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: autotasker_n8n
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n123
      - N8N_ENCRYPTION_KEY=your-encryption-key-here
      - N8N_USER_MANAGEMENT_DISABLED=true
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows
      - ./n8n/custom-nodes:/home/node/.n8n/custom
    networks:
      - autotasker_network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL Database for n8n
  postgres:
    image: postgres:15
    container_name: autotasker_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: n8n
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8n123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - autotasker_network
    healthcheck:
      test: pg_isready -U n8n -d n8n
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Python Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autotasker_backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/autotasker?authSource=admin
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5678
      - API_KEY_SECRET=${API_KEY_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - autotasker_network
    healthcheck:
      test: curl -f http://localhost:5000/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: autotasker_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      n8n:
        condition: service_healthy
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_N8N_URL=http://localhost:5678
      - REACT_APP_ENVIRONMENT=production
      - GENERATE_SOURCEMAP=false
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - autotasker_network
    healthcheck:
      test: curl -f http://localhost:3000 || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: autotasker_nginx
    restart: unless-stopped
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      n8n:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - autotasker_network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching (Optional)
  redis:
    image: redis:7.2-alpine
    container_name: autotasker_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autotasker_network
    healthcheck:
      test: redis-cli --raw incr ping
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local

networks:
  autotasker_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
